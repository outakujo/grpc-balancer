// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: pb/svc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SvcClient is the client API for Svc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SvcClient interface {
	CreateSvc(ctx context.Context, in *CreateSvcRequest, opts ...grpc.CallOption) (*CreateSvcReply, error)
	UpdateSvc(ctx context.Context, in *UpdateSvcRequest, opts ...grpc.CallOption) (*UpdateSvcReply, error)
	DeleteSvc(ctx context.Context, in *DeleteSvcRequest, opts ...grpc.CallOption) (*DeleteSvcReply, error)
	GetSvc(ctx context.Context, in *GetSvcRequest, opts ...grpc.CallOption) (*GetSvcReply, error)
	ListSvc(ctx context.Context, in *ListSvcRequest, opts ...grpc.CallOption) (*ListSvcReply, error)
}

type svcClient struct {
	cc grpc.ClientConnInterface
}

func NewSvcClient(cc grpc.ClientConnInterface) SvcClient {
	return &svcClient{cc}
}

func (c *svcClient) CreateSvc(ctx context.Context, in *CreateSvcRequest, opts ...grpc.CallOption) (*CreateSvcReply, error) {
	out := new(CreateSvcReply)
	err := c.cc.Invoke(ctx, "/pb.Svc/CreateSvc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *svcClient) UpdateSvc(ctx context.Context, in *UpdateSvcRequest, opts ...grpc.CallOption) (*UpdateSvcReply, error) {
	out := new(UpdateSvcReply)
	err := c.cc.Invoke(ctx, "/pb.Svc/UpdateSvc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *svcClient) DeleteSvc(ctx context.Context, in *DeleteSvcRequest, opts ...grpc.CallOption) (*DeleteSvcReply, error) {
	out := new(DeleteSvcReply)
	err := c.cc.Invoke(ctx, "/pb.Svc/DeleteSvc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *svcClient) GetSvc(ctx context.Context, in *GetSvcRequest, opts ...grpc.CallOption) (*GetSvcReply, error) {
	out := new(GetSvcReply)
	err := c.cc.Invoke(ctx, "/pb.Svc/GetSvc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *svcClient) ListSvc(ctx context.Context, in *ListSvcRequest, opts ...grpc.CallOption) (*ListSvcReply, error) {
	out := new(ListSvcReply)
	err := c.cc.Invoke(ctx, "/pb.Svc/ListSvc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SvcServer is the server API for Svc service.
// All implementations must embed UnimplementedSvcServer
// for forward compatibility
type SvcServer interface {
	CreateSvc(context.Context, *CreateSvcRequest) (*CreateSvcReply, error)
	UpdateSvc(context.Context, *UpdateSvcRequest) (*UpdateSvcReply, error)
	DeleteSvc(context.Context, *DeleteSvcRequest) (*DeleteSvcReply, error)
	GetSvc(context.Context, *GetSvcRequest) (*GetSvcReply, error)
	ListSvc(context.Context, *ListSvcRequest) (*ListSvcReply, error)
	mustEmbedUnimplementedSvcServer()
}

// UnimplementedSvcServer must be embedded to have forward compatible implementations.
type UnimplementedSvcServer struct {
}

func (UnimplementedSvcServer) CreateSvc(context.Context, *CreateSvcRequest) (*CreateSvcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSvc not implemented")
}
func (UnimplementedSvcServer) UpdateSvc(context.Context, *UpdateSvcRequest) (*UpdateSvcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSvc not implemented")
}
func (UnimplementedSvcServer) DeleteSvc(context.Context, *DeleteSvcRequest) (*DeleteSvcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSvc not implemented")
}
func (UnimplementedSvcServer) GetSvc(context.Context, *GetSvcRequest) (*GetSvcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSvc not implemented")
}
func (UnimplementedSvcServer) ListSvc(context.Context, *ListSvcRequest) (*ListSvcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSvc not implemented")
}
func (UnimplementedSvcServer) mustEmbedUnimplementedSvcServer() {}

// UnsafeSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SvcServer will
// result in compilation errors.
type UnsafeSvcServer interface {
	mustEmbedUnimplementedSvcServer()
}

func RegisterSvcServer(s grpc.ServiceRegistrar, srv SvcServer) {
	s.RegisterService(&Svc_ServiceDesc, srv)
}

func _Svc_CreateSvc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcServer).CreateSvc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Svc/CreateSvc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcServer).CreateSvc(ctx, req.(*CreateSvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Svc_UpdateSvc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcServer).UpdateSvc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Svc/UpdateSvc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcServer).UpdateSvc(ctx, req.(*UpdateSvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Svc_DeleteSvc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcServer).DeleteSvc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Svc/DeleteSvc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcServer).DeleteSvc(ctx, req.(*DeleteSvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Svc_GetSvc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcServer).GetSvc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Svc/GetSvc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcServer).GetSvc(ctx, req.(*GetSvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Svc_ListSvc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcServer).ListSvc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Svc/ListSvc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcServer).ListSvc(ctx, req.(*ListSvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Svc_ServiceDesc is the grpc.ServiceDesc for Svc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Svc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Svc",
	HandlerType: (*SvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSvc",
			Handler:    _Svc_CreateSvc_Handler,
		},
		{
			MethodName: "UpdateSvc",
			Handler:    _Svc_UpdateSvc_Handler,
		},
		{
			MethodName: "DeleteSvc",
			Handler:    _Svc_DeleteSvc_Handler,
		},
		{
			MethodName: "GetSvc",
			Handler:    _Svc_GetSvc_Handler,
		},
		{
			MethodName: "ListSvc",
			Handler:    _Svc_ListSvc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/svc.proto",
}
